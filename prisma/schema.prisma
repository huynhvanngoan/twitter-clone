// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["mongoDb"]
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  username     String  @unique
  email        String  @unique
  name         String?
  password     String
  profileImage String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[] @relation("UserRefreshTokens")

  Tweet Tweet[] @relation(name: "UserTweets")

  MediaFile MediaFile[] @relation(name: "UserMediaFiles")
}

model RefreshToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  token String @unique

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], name: "UserRefreshTokens")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tweet {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], name: "UserTweets")
  authorId String @db.ObjectId

  replyToId String? @db.ObjectId
  replyTo   Tweet?  @relation(fields: [replyToId], references: [id], name: "replies", onDelete: NoAction, onUpdate: NoAction)

  replies Tweet[] @relation(name: "replies")

  //Media Files

  mediaFiles MediaFile[] @relation(name: "TweetMediaFiles")
}

model MediaFile {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  url              String
  providerPublicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], name: "UserMediaFiles")

  tweetId String? @db.ObjectId
  tweet   Tweet?  @relation(fields: [tweetId], references: [id], name: "TweetMediaFiles")
}
